sched_dep_time > 0900,
sched_arr_time < 2000
)|>
group_by(flight)|>
summarize(
delay = mean(arr_delay, na.rm=TRUE),
cancelled = sum(is.na(arr_delay)),
n = n()
)|>
filter(n > 10)
library(tidyverse)
library(ggplot2)
library(ggthemes)
ggplot(mpg, aes(displ, hwy)) + geom_point(aies(color = class))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(color = class))
not_cancelled |>
group_by(year, month, day) |>
summarize(mean = mean(dep_delay))
not_cancelled <- flights |>
filter(!is.na(dep_delay) , !is.na(arr_delay))
library(nycflights13)
library(nycflights13)
library(dplyr)
library(nycflights13)
not_cancelled <- flights |>
filter(!is.na(dep_delay) , !is.na(arr_delay))
not_cancelled <- flights |>
filter(!is.na(dep_delay) , !is.na(arr_delay))
not_cancelled |>
group_by(year, month, day) |>
summarize(mean = mean(dep_delay))
not_cancelled |>
group_by(year, month, day) |>
summarize(mean = mean(dep_delay))
not_cancelled |>
group_by(year, month, day) |>
summarize(mean = mean(dep_delay))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
getwd()
source("~/r4ds/Superstore Lab - McNaboe.R")
library(tidyverse)
library(ggthemes)
library(ggplot2)
library(stringr)
library(lubridate)
library(readxl)
superstore <- read_excel("data/Superstore.xlsx")
source("~/r4ds/Superstore Lab - McNaboe.R")
library(tidyverse)
students <- read_csv("https://pos.it/r4ds-students-csv")
students
students <- read_csv("https://pos.it/r4ds-students-csv", na = c("N/A", ""))
students
students |>
rename(
student_id = "Student ID",
full_name = "Full Name"
)
students |> janitor::clean_names()
students |>
janitor::clean_names() |>
mutate(meal_plan = factor(meal_plan))
students <- students |>
janitor::clean_names() |>
mutate(
meal_plan = factor(meal_plan),
age = parse_number(if_else(age == "five", "5", age))
)
read_csv(
"a,b,c
1,2,3
4,5,6"
)
?read_csv
??read.csv
source("~/r4ds/Practice.R")
tidyverse_update()
install.packages(c("dplyr", "haven", "jsonlite", "ragg", "xml2"))
dput(mtcars)
mtcars <- structure(list(mpg = c(21, 21, 22.8, 21.4, 18.7, 18.1, 14.3,
24.4, 22.8, 19.2, 17.8, 16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4,
30.4, 33.9, 21.5, 15.5, 15.2, 13.3, 19.2, 27.3, 26, 30.4, 15.8,
19.7, 15, 21.4), cyl = c(6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8,
8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 8, 6, 8, 4),
disp = c(160, 160, 108, 258, 360, 225, 360, 146.7, 140.8,
167.6, 167.6, 275.8, 275.8, 275.8, 472, 460, 440, 78.7, 75.7,
71.1, 120.1, 318, 304, 350, 400, 79, 120.3, 95.1, 351, 145,
301, 121), hp = c(110, 110, 93, 110, 175, 105, 245, 62, 95,
123, 123, 180, 180, 180, 205, 215, 230, 66, 52, 65, 97, 150,
150, 245, 175, 66, 91, 113, 264, 175, 335, 109), drat = c(3.9,
3.9, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,
3.07, 3.07, 3.07, 2.93, 3, 3.23, 4.08, 4.93, 4.22, 3.7, 2.76,
3.15, 3.73, 3.08, 4.08, 4.43, 3.77, 4.22, 3.62, 3.54, 4.11
), wt = c(2.62, 2.875, 2.32, 3.215, 3.44, 3.46, 3.57, 3.19,
3.15, 3.44, 3.44, 4.07, 3.73, 3.78, 5.25, 5.424, 5.345, 2.2,
1.615, 1.835, 2.465, 3.52, 3.435, 3.84, 3.845, 1.935, 2.14,
1.513, 3.17, 2.77, 3.57, 2.78), qsec = c(16.46, 17.02, 18.61,
19.44, 17.02, 20.22, 15.84, 20, 22.9, 18.3, 18.9, 17.4, 17.6,
18, 17.98, 17.82, 17.42, 19.47, 18.52, 19.9, 20.01, 16.87,
17.3, 15.41, 17.05, 18.9, 16.7, 16.9, 14.5, 15.5, 14.6, 18.6
), vs = c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,
0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1), am = c(1,
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1), gear = c(4, 4, 4, 3,
3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3,
3, 3, 4, 5, 5, 5, 5, 5, 4), carb = c(4, 4, 1, 1, 2, 1, 4,
2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2, 2, 4, 2, 1,
2, 2, 4, 6, 8, 2)), row.names = c("Mazda RX4", "Mazda RX4 Wag",
"Datsun 710", "Hornet 4 Drive", "Hornet Sportabout", "Valiant",
"Duster 360", "Merc 240D", "Merc 230", "Merc 280", "Merc 280C",
"Merc 450SE", "Merc 450SL", "Merc 450SLC", "Cadillac Fleetwood",
"Lincoln Continental", "Chrysler Imperial", "Fiat 128", "Honda Civic",
"Toyota Corolla", "Toyota Corona", "Dodge Challenger", "AMC Javelin",
"Camaro Z28", "Pontiac Firebird", "Fiat X1-9", "Porsche 914-2",
"Lotus Europa", "Ford Pantera L", "Ferrari Dino", "Maserati Bora",
"Volvo 142E"), class = "data.frame")
glimpse(mtcars)
library(tidyverse)
glimpse(mtcars)
view(mtcars)
view(mpg)
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy, shape = class)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy, size = class)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy, alpha = class)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(color = "blue")
ggplot(mpg) +
geom_point(aes(x = hwy, y = displ, color = "pink", shape = 2))
ggplot(mpg, mapping = aes(x = hwy, y = displ, color = "pink", shape = 2) +
geom_point())
ggplot(mpg, mapping = aes(x = hwy, y = displ, color = "pink", shape = 2)) +
geom_point()
ggplot(mpg, mapping = aes(x = hwy, y = displ, color = "pink")) + geom_point(shape = 2)
ggplot(mpg, mapping = aes(x = hwy, y = displ, fill = "pink")) + geom_point(shape = 2)
ggplot(mpg, mapping = aes(x = hwy, y = displ)) + geom_point(shape = 2, , fill = "pink")
ggplot(mpg, mapping = aes(x = hwy, y = displ)) + geom_point(shape = 2,fill = "pink")
ggplot(mpg, mapping = aes(x = hwy, y = displ)) + geom_point(shape = 2, color = "pink")
ggplot(
mpg,
mapping = aes(
x = hwy,
y = displ
color = "pink")) +
ggplot(
mpg,
mapping = aes(
x = hwy,
y = displ,
color = "pink")) +
geom_point(
shape = 2,
color = "pink")
ggplot(
mpg,
mapping = aes(
x = hwy,
y = displ)) +
geom_point(
shape = 2,
color = "pink")
ggplot(
mpg,
mapping = aes(
x = hwy,
y = displ)) +
geom_point(
pch = 2,
color = "pink")
ggplot(
mpg,
mapping = aes(
x = hwy,
y = displ)) +
geom_point(
shape = 17,
color = "pink")
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = "blue"))
ggplot(mpg, color = "blue") +
geom_point(aes(x = displ, y = hwy))
ggplot(mpg, mapping = aes(color = "blue")) +
geom_point(aes(x = displ, y = hwy))
ggplot(mpg, mapping = aes(x = displ, y = hwy, color = "blue")) +
geom_point()
?geom_point
ggplot(mpg, mapping = aes(x = displ, y = hwy, color = displ < 5)) +
geom_point()
source("~/Weather - McNaboe.R")
source("~/Weather - McNaboe.R")
source("~/Weather - McNaboe.R")
source("~/Weather - McNaboe.R")
source("~/r4ds/Weather - McNaboe.R")
source("~/r4ds/Weather - McNaboe.R")
source("~/r4ds/Weather - McNaboe.R")
source("~/r4ds/Weather - McNaboe.R")
source("~/r4ds/Weather - McNaboe.R")
view(philly)
source("~/r4ds/Weather - McNaboe.R")
glimpse(philly)
view(philly)
source("~/r4ds/Weather - McNaboe.R")
library(janitor)
pgilly <- clean_names(philly, case = "snake")
view(philly)
library(janitor)
philly <- clean_names(philly, case = "snake")
view(philly)
glimpse(philly)
setwd("~/r4ds")
source("~/r4ds/Weather - McNaboe.R")
source("~/r4ds/Weather - McNaboe.R")
past <- philly |>
group_by(year, month) |>
arrange(day) |>
ungroup() |>
group_by(year) |>
mutate(newDay = seq(1, length(day))) |>
ungroup() |>
select(
record_high_f,
record_low_f,
month,
day
)
past <- philly |>
group_by(year, month) |>
arrange(day) |>
ungroup() |>
group_by(year) |>
mutate(newDay = seq(1, length(day))) |>
ungroup() |>
select(
record_high_f,
record_low_f,
month,
day
)
p <- ggplot(past, aes(newDay) +
geom_linerange(Past, mapping = aes(x = newDay, ymin = lower, ymax = upper), alpha = 0.1)
print(p)
past <- philly |>
group_by(year, month) |>
arrange(day) |>
ungroup() |>
group_by(year) |>
mutate(newDay = seq(1, length(day))) |>
ungroup() |>
select(
record_high_f,
record_low_f,
month,
day
)
p <- ggplot(past, aes(newDay) +
geom_linerange(Past, mapping = aes(x = newDay, ymin = lower, ymax = upper), alpha = 0.1)
)
past <- philly |>
group_by(year, month) |>
arrange(day) |>
ungroup() |>
group_by(year) |>
mutate(newDay = seq(1, length(day))) |>
ungroup() |>
select(
record_high_f,
record_low_f,
month,
day
)
p <- ggplot(past, aes(newDay) +
geom_linerange(past, mapping = aes(x = newDay, ymin = lower, ymax = upper), alpha = 0.1)
)
# past data frame
past <- philly |>
group_by(year, month) |>
arrange(day) |>
ungroup() |>
group_by(year) |>
mutate(newDay = seq(1, length(day))) |>
ungroup() |>
select(
record_high_f,
record_low_f,
month,
day
)
p <- ggplot(past, mapping = aes(newDay) +
geom_linerange(past, mapping = aes(x = newDay, ymin = lower, ymax = upper), alpha = 0.1)
)
# past data frame
past <- philly |>
select(
record_high_f,
record_low_f,
month,
day
)
p <- ggplot(past)+
geom_linerange(past, mapping = aes(x = newDay, ymin = lower, ymax = upper), alpha = 0.1)
print(p)
past <- philly |>
select(
record_high_f,
record_low_f,
month,
day
)
p <- ggplot(past)+
geom_linerange(past, mapping = aes(x = paste(month, day), ymin = lower, ymax = upper), alpha = 0.1)
print(p)
past <- philly |>
select(
record_high_f,
record_low_f,
month,
day
)
p <- ggplot(past)+
geom_linerange(past, mapping = aes(x = paste(month, day), ymin = record_low_f, ymax = record_high_f), alpha = 0.1)
print(p)
past <- philly |>
select(
record_high_f,
record_low_f,
month,
day
)
p <- ggplot(past)+
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank()) +
geom_linerange(past, mapping = aes(x = paste(month, day), ymin = record_low_f, ymax = record_high_f), color = "wheat2", alpha = 0.1)
print(p)
source("~/r4ds/Animation Graphs.R")
# install.packages("gganimate")
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
library(gifski)
library(png)
# Graph 1: Transitioning through time
gapminder
graph1 = gapminder %>%
ggplot(aes(x=gdpPercap, y=lifeExp, color=continent, size=pop)) +
geom_point(alpha = 0.7, stroke = 0) +
theme_fivethirtyeight() +
scale_size(range=c(2,12), guide="none") +
scale_x_log10() +
labs(title = "Life Expectancy vs GDP Per Capita by Country",
x = "Income per person (GDP / capita)",
y = "Life expectancy (years)",
color = "Continent",
caption = "Source: Gapminder") +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10)) +
scale_color_brewer(palette = "Set2")
graph1.animation = graph1 +
transition_time(year) +
labs(subtitle = "Year: {frame_time}") +
shadow_wake(wake_length = 0.1)
animate(graph1.animation, height = 500, width = 800, fps = 30, duration = 10,
end_pause = 60, res = 100,  renderer = gifski_renderer)
anim_save("gapminder graph.gif")
# install.packages("gganimate")
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
library(gifski)
library(png)
# Graph 1: Transitioning through time
gapminder
graph1 = gapminder %>%
ggplot(aes(x=gdpPercap, y=lifeExp, color=continent, size=pop)) +
geom_point(alpha = 0.7, stroke = 0) +
theme_fivethirtyeight() +
scale_size(range=c(2,12), guide="none") +
scale_x_log10() +
labs(title = "Life Expectancy vs GDP Per Capita by Country",
x = "Income per person (GDP / capita)",
y = "Life expectancy (years)",
color = "Continent",
caption = "Source: Gapminder") +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10)) +
scale_color_brewer(palette = "Set2")
graph1.animation = graph1 +
transition_time(year) +
labs(subtitle = "Year: {frame_time}") +
shadow_wake(wake_length = 0.1)
animate(graph1.animation, height = 500, width = 800, fps = 30, duration = 10,
end_pause = 60, res = 100,  renderer = gifski_renderer)
anim_save("gapminder graph.gif",  renderer = gifski_renderer)
# install.packages("gganimate")
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
library(gifski)
library(png)
# Graph 1: Transitioning through time
gapminder
graph1 = gapminder %>%
ggplot(aes(x=gdpPercap, y=lifeExp, color=continent, size=pop)) +
geom_point(alpha = 0.7, stroke = 0) +
theme_fivethirtyeight() +
scale_size(range=c(2,12), guide="none") +
scale_x_log10() +
labs(title = "Life Expectancy vs GDP Per Capita by Country",
x = "Income per person (GDP / capita)",
y = "Life expectancy (years)",
color = "Continent",
caption = "Source: Gapminder") +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10)) +
scale_color_brewer(palette = "Set2")
graph1.animation = graph1 +
transition_time(year) +
labs(subtitle = "Year: {frame_time}") +
shadow_wake(wake_length = 0.1)
animate(graph1.animation, height = 500, width = 800, fps = 30, duration = 10,
end_pause = 60, res = 100,  renderer = gifski_renderer())
anim_save("gapminder graph.gif")
# Graph 2: Letting data gradually appear
library(readr)
library(tidyr)
game_sales = read_csv("r4ds/data/vgsales.csv") %>%
mutate(Year = as.numeric(Year)) %>%
filter(Platform == 'PS3',
Genre %in% c("Action", "Shooter", "Sports", "Racing", "Simulation")) %>%
drop_na() %>%
group_by(Year, Genre) %>%
summarise(Sales = sum(Global_Sales, na.rm = TRUE))
# Graph 2: Letting data gradually appear
library(readr)
library(tidyr)
game_sales = read_csv("data/vgsales.csv") %>%
mutate(Year = as.numeric(Year)) %>%
filter(Platform == 'PS3',
Genre %in% c("Action", "Shooter", "Sports", "Racing", "Simulation")) %>%
drop_na() %>%
group_by(Year, Genre) %>%
summarise(Sales = sum(Global_Sales, na.rm = TRUE))
graph2 = game_sales %>%
ggplot(aes(x=Year, y=Sales, color=Genre)) +
geom_line(size = 2, alpha = 0.75) +
theme_solarized_2(light = FALSE) +
labs(title = "PS3 Video Game Sales",
y = "Global Sales ($ Millions USD)") +
theme(text = element_text(family = "DM Sans Medium", colour = "#EEEEEE"),
title = element_text(color = "#EEEEEE"),
axis.title.x = element_blank(),
panel.background = element_rect(fill = NA),
plot.background = element_rect(fill = "#111111"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_blank(),
legend.key = element_blank(),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)) +
scale_color_brewer(palette = "Pastel1") +
geom_point() +
scale_x_continuous(breaks = 0:2100)
graph2.animation = graph2 +
transition_reveal(Year) +
view_follow(fixed_y = TRUE)
animate(graph2.animation, height = 500, width = 800, fps = 30, duration = 10,
end_pause = 60, res = 100,  renderer = gifski_renderer())
anim_save("ps3 game sales.gif")
# Graph 3: Transition between states
reviews = read_csv("data/googleplaystore.csv") %>%
filter(Category %in% c("GAME", "SOCIAL", "PRODUCTIVITY", "TOOLS", "EDUCATION"))
graph3 = reviews %>%
ggplot(aes(x=Category, y=Rating, fill=Category)) +
geom_boxplot() +
theme_fivethirtyeight() +
labs(title = "Google Play Store Ratings",
y = "Rating (out of 5)",
caption = "Source: Kaggle") +
theme(legend.position = "none",
axis.title.y = element_text(),
text = element_text(family="Poppins SemiBold"),
panel.grid.major.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_tableau()
graph3.animation = graph3 +
transition_states(Category, wrap = FALSE) +
shadow_mark(alpha = 0.5) +
enter_grow() +
exit_fade() +
ease_aes('back-out')
animate(graph3.animation, height = 500, width = 800, fps = 30, duration = 10,
end_pause = 60, res = 100,  renderer = gifski_renderer())
anim_save("playstore reviews.gif")
